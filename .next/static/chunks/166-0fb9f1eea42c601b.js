"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[166],{9808:function(e,t,n){/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(2265),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=r.useState,s=r.useEffect,i=r.useLayoutEffect,l=r.useDebugValue;function checkIfSnapshotChanged(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var u="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=a({inst:{value:n,getSnapshot:t}}),o=r[0].inst,u=r[1];return i(function(){o.value=n,o.getSnapshot=t,checkIfSnapshotChanged(o)&&u({inst:o})},[e,n,t]),s(function(){return checkIfSnapshotChanged(o)&&u({inst:o}),e(function(){checkIfSnapshotChanged(o)&&u({inst:o})})},[e]),l(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:u},3176:function(e,t,n){/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(2265),o=n(6272),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},s=o.useSyncExternalStore,i=r.useRef,l=r.useEffect,u=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var d=i(null);if(null===d.current){var f={hasValue:!1,value:null};d.current=f}else f=d.current;var v=s(e,(d=u(function(){function memoizedSelector(t){if(!i){if(i=!0,e=t,t=r(t),void 0!==o&&f.hasValue){var n=f.value;if(o(n,t))return s=n}return s=t}if(n=s,a(e,t))return n;var l=r(t);return void 0!==o&&o(n,l)?(e=t,n):(e=t,s=l)}var e,s,i=!1,l=void 0===n?null:n;return[function(){return memoizedSelector(t())},null===l?void 0:function(){return memoizedSelector(l())}]},[t,n,r,o]))[0],d[1]);return l(function(){f.hasValue=!0,f.value=v},[v]),c(v),v}},6272:function(e,t,n){e.exports=n(9808)},5401:function(e,t,n){e.exports=n(3176)},4660:function(e,t,n){n.d(t,{Ue:function(){return create}});let createStoreImpl=e=>{let t;let n=new Set,setState=(e,r)=>{let o="function"==typeof e?e(t):e;if(!Object.is(o,t)){let e=t;t=(null!=r?r:"object"!=typeof o||null===o)?o:Object.assign({},t,o),n.forEach(n=>n(t,e))}},getState=()=>t,r={setState,getState,getInitialState:()=>o,subscribe:e=>(n.add(e),()=>n.delete(e)),destroy:()=>{console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."),n.clear()}},o=t=e(setState,getState,r);return r},createStore=e=>e?createStoreImpl(e):createStoreImpl;var r=n(2265),o=n(5401);let{useDebugValue:a}=r,{useSyncExternalStoreWithSelector:s}=o,i=!1,identity=e=>e,createImpl=e=>{"function"!=typeof e&&console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");let t="function"==typeof e?createStore(e):e,useBoundStore=(e,n)=>(function(e,t=identity,n){n&&!i&&(console.warn("[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"),i=!0);let r=s(e.subscribe,e.getState,e.getServerState||e.getInitialState,t,n);return a(r),r})(t,e,n);return Object.assign(useBoundStore,t),useBoundStore},create=e=>e?createImpl(e):createImpl},4810:function(e,t,n){n.d(t,{mW:function(){return devtools},tJ:function(){return persist}});let r=new Map,getTrackedConnectionState=e=>{let t=r.get(e);return t?Object.fromEntries(Object.entries(t.stores).map(([e,t])=>[e,t.getState()])):{}},extractConnectionInformation=(e,t,n)=>{if(void 0===e)return{type:"untracked",connection:t.connect(n)};let o=r.get(n.name);if(o)return{type:"tracked",store:e,...o};let a={connection:t.connect(n),stores:{}};return r.set(n.name,a),{type:"tracked",store:e,...a}},devtools=(e,t={})=>(n,r,o)=>{let a;let{enabled:s,anonymousActionType:i,store:l,...u}=t;try{a=(null==s||s)&&window.__REDUX_DEVTOOLS_EXTENSION__}catch(e){}if(!a)return s&&console.warn("[zustand devtools middleware] Please install/enable Redux devtools extension"),e(n,r,o);let{connection:c,...d}=extractConnectionInformation(l,a,u),f=!0;o.setState=(e,t,a)=>{let s=n(e,t);if(!f)return s;let d=void 0===a?{type:i||"anonymous"}:"string"==typeof a?{type:a}:a;return void 0===l?null==c||c.send(d,r()):null==c||c.send({...d,type:`${l}/${d.type}`},{...getTrackedConnectionState(u.name),[l]:o.getState()}),s};let setStateFromDevtools=(...e)=>{let t=f;f=!1,n(...e),f=t},v=e(o.setState,r,o);if("untracked"===d.type?null==c||c.init(v):(d.stores[d.store]=o,null==c||c.init(Object.fromEntries(Object.entries(d.stores).map(([e,t])=>[e,e===d.store?v:t.getState()])))),o.dispatchFromDevtools&&"function"==typeof o.dispatch){let e=!1,t=o.dispatch;o.dispatch=(...n)=>{"__setState"!==n[0].type||e||(console.warn('[zustand devtools middleware] "__setState" action type is reserved to set state from the devtools. Avoid using it.'),e=!0),t(...n)}}return c.subscribe(e=>{var t;switch(e.type){case"ACTION":if("string"!=typeof e.payload){console.error("[zustand devtools middleware] Unsupported action format");return}return parseJsonThen(e.payload,e=>{if("__setState"===e.type){if(void 0===l){setStateFromDevtools(e.state);return}1!==Object.keys(e.state).length&&console.error(`
                    [zustand devtools middleware] Unsupported __setState action format. 
                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),
                    and value of this only key should be a state object. Example: { "type": "__setState", "state": { "abc123Store": { "foo": "bar" } } }
                    `);let t=e.state[l];if(null==t)return;JSON.stringify(o.getState())!==JSON.stringify(t)&&setStateFromDevtools(t);return}o.dispatchFromDevtools&&"function"==typeof o.dispatch&&o.dispatch(e)});case"DISPATCH":switch(e.payload.type){case"RESET":if(setStateFromDevtools(v),void 0===l)return null==c?void 0:c.init(o.getState());return null==c?void 0:c.init(getTrackedConnectionState(u.name));case"COMMIT":if(void 0===l){null==c||c.init(o.getState());break}return null==c?void 0:c.init(getTrackedConnectionState(u.name));case"ROLLBACK":return parseJsonThen(e.state,e=>{if(void 0===l){setStateFromDevtools(e),null==c||c.init(o.getState());return}setStateFromDevtools(e[l]),null==c||c.init(getTrackedConnectionState(u.name))});case"JUMP_TO_STATE":case"JUMP_TO_ACTION":return parseJsonThen(e.state,e=>{if(void 0===l){setStateFromDevtools(e);return}JSON.stringify(o.getState())!==JSON.stringify(e[l])&&setStateFromDevtools(e[l])});case"IMPORT_STATE":{let{nextLiftedState:n}=e.payload,r=null==(t=n.computedStates.slice(-1)[0])?void 0:t.state;if(!r)return;void 0===l?setStateFromDevtools(r):setStateFromDevtools(r[l]),null==c||c.send(null,n);break}case"PAUSE_RECORDING":return f=!f}return}}),v},parseJsonThen=(e,t)=>{let n;try{n=JSON.parse(e)}catch(e){console.error("[zustand devtools middleware] Could not parse the received json",e)}void 0!==n&&t(n)},toThenable=e=>t=>{try{let n=e(t);if(n instanceof Promise)return n;return{then:e=>toThenable(e)(n),catch(e){return this}}}catch(e){return{then(e){return this},catch:t=>toThenable(t)(e)}}},oldImpl=(e,t)=>(n,r,o)=>{let a,s,i={getStorage:()=>localStorage,serialize:JSON.stringify,deserialize:JSON.parse,partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},l=!1,u=new Set,c=new Set;try{a=i.getStorage()}catch(e){}if(!a)return e((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${i.name}', the given storage is currently unavailable.`),n(...e)},r,o);let d=toThenable(i.serialize),setItem=()=>{let e;let t=i.partialize({...r()}),n=d({state:t,version:i.version}).then(e=>a.setItem(i.name,e)).catch(t=>{e=t});if(e)throw e;return n},f=o.setState;o.setState=(e,t)=>{f(e,t),setItem()};let v=e((...e)=>{n(...e),setItem()},r,o),hydrate=()=>{var e;if(!a)return;l=!1,u.forEach(e=>e(r()));let t=(null==(e=i.onRehydrateStorage)?void 0:e.call(i,r()))||void 0;return toThenable(a.getItem.bind(a))(i.name).then(e=>{if(e)return i.deserialize(e)}).then(e=>{if(e){if("number"!=typeof e.version||e.version===i.version)return e.state;if(i.migrate)return i.migrate(e.state,e.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}}).then(e=>{var t;return n(s=i.merge(e,null!=(t=r())?t:v),!0),setItem()}).then(()=>{null==t||t(s,void 0),l=!0,c.forEach(e=>e(s))}).catch(e=>{null==t||t(void 0,e)})};return o.persist={setOptions:e=>{i={...i,...e},e.getStorage&&(a=e.getStorage())},clearStorage:()=>{null==a||a.removeItem(i.name)},getOptions:()=>i,rehydrate:()=>hydrate(),hasHydrated:()=>l,onHydrate:e=>(u.add(e),()=>{u.delete(e)}),onFinishHydration:e=>(c.add(e),()=>{c.delete(e)})},hydrate(),s||v},newImpl=(e,t)=>(n,r,o)=>{let a,s={storage:function(e,t){let n;try{n=e()}catch(e){return}return{getItem:e=>{var r;let parse=e=>null===e?null:JSON.parse(e,null==t?void 0:t.reviver),o=null!=(r=n.getItem(e))?r:null;return o instanceof Promise?o.then(parse):parse(o)},setItem:(e,r)=>n.setItem(e,JSON.stringify(r,null==t?void 0:t.replacer)),removeItem:e=>n.removeItem(e)}}(()=>localStorage),partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},i=!1,l=new Set,u=new Set,c=s.storage;if(!c)return e((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${s.name}', the given storage is currently unavailable.`),n(...e)},r,o);let setItem=()=>{let e=s.partialize({...r()});return c.setItem(s.name,{state:e,version:s.version})},d=o.setState;o.setState=(e,t)=>{d(e,t),setItem()};let f=e((...e)=>{n(...e),setItem()},r,o);o.getInitialState=()=>f;let hydrate=()=>{var e,t;if(!c)return;i=!1,l.forEach(e=>{var t;return e(null!=(t=r())?t:f)});let o=(null==(t=s.onRehydrateStorage)?void 0:t.call(s,null!=(e=r())?e:f))||void 0;return toThenable(c.getItem.bind(c))(s.name).then(e=>{if(e){if("number"!=typeof e.version||e.version===s.version)return[!1,e.state];if(s.migrate)return[!0,s.migrate(e.state,e.version)];console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}return[!1,void 0]}).then(e=>{var t;let[o,i]=e;if(n(a=s.merge(i,null!=(t=r())?t:f),!0),o)return setItem()}).then(()=>{null==o||o(a,void 0),a=r(),i=!0,u.forEach(e=>e(a))}).catch(e=>{null==o||o(void 0,e)})};return o.persist={setOptions:e=>{s={...s,...e},e.storage&&(c=e.storage)},clearStorage:()=>{null==c||c.removeItem(s.name)},getOptions:()=>s,rehydrate:()=>hydrate(),hasHydrated:()=>i,onHydrate:e=>(l.add(e),()=>{l.delete(e)}),onFinishHydration:e=>(u.add(e),()=>{u.delete(e)})},s.skipHydration||hydrate(),a||f},persist=(e,t)=>"getStorage"in t||"serialize"in t||"deserialize"in t?(console.warn("[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."),oldImpl(e,t)):newImpl(e,t)}}]);